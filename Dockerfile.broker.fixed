# Build stage
FROM node:20-alpine AS builder

# Install pnpm
RUN corepack enable && corepack prepare pnpm@8 --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/broker-api/package.json ./apps/broker-api/
COPY packages/*/package.json ./packages/*/

# Install all dependencies (use no-frozen-lockfile for now)
RUN pnpm install --no-frozen-lockfile

# Copy source code
COPY . .

# Build all packages and the broker API
RUN pnpm run build

# Production dependencies stage
FROM node:20-alpine AS deps

# Install pnpm
RUN corepack enable && corepack prepare pnpm@8 --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/broker-api/package.json ./apps/broker-api/
COPY packages/*/package.json ./packages/*/

# Install only production dependencies (use no-frozen-lockfile for now)
RUN pnpm install --no-frozen-lockfile --prod

# Final production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nodejs:nodejs /app/packages/*/node_modules ./packages/*/node_modules

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/apps/broker-api/dist ./apps/broker-api/dist
COPY --from=builder --chown=nodejs:nodejs /app/packages/*/dist ./packages/*/dist

# Copy package files
COPY --chown=nodejs:nodejs package.json ./
COPY --chown=nodejs:nodejs apps/broker-api/package.json ./apps/broker-api/

# Copy any runtime configuration files
COPY --chown=nodejs:nodejs apps/broker-api/src/config ./apps/broker-api/dist/config

# Create necessary directories
RUN mkdir -p /app/logs && chown -R nodejs:nodejs /app/logs

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"

# Set production environment
ENV NODE_ENV=production

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "apps/broker-api/dist/server.js"]